" Use Vim settings, rather than Vi settings.
set nocompatible

" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Switch syntax highlighting on
syntax on

" Enable Python highlight
let python_highlight_all = 1

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Enable line number
set number

" Enable relative line number
set relativenumber

" Backup and swapfile settings
set backup
set backupdir=$HOME/.vim/backup/
set noswapfile

" Windows settings and operation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Tab operation
nnoremap th  :tabprev<CR>
nnoremap tl  :tabnext<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Code Folding settings
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za

" Encoding settings
set encoding=utf-8
set ambiwidth=double

" Settings for code indentation style
set tabstop=4
set shiftwidth=4

" Enable the clipboard sharing function between vim and system
" vim needs builded with +clipboard feature
set clipboard=unnamedplus

" Settings for Python files for meet the PEP8 requirement
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" Specify a directory for plugins
" Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" No-BS Python code folding for Vim
Plug 'tmhedberg/SimpylFold'

" An alternative indentation script for Python
Plug 'vim-scripts/indentpython.vim'

" Syntax checking hacks for vim
Plug 'vim-syntastic/syntastic'

" Vim plugin, insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'

" Flake8 plugin for Vim
Plug 'nvie/vim-flake8'

" Highlights whitespace at the end of lines, only in modifiable buffers
Plug 'bitc/vim-bad-whitespace'

" Vim theme
Plug 'jakwings/vim-colors'

" A tree explorer plugin for vim
Plug 'scrooloose/nerdtree'

" A plugin of NERDTree showing git status
Plug 'Xuyuanp/nerdtree-git-plugin'

" NERDTree and tabs together in Vim, painlessly
Plug 'jistr/vim-nerdtree-tabs'

" Vim plugin for intensely orgasmic commenting
Plug 'scrooloose/nerdcommenter'

" Vim plugin that displays tags in a window
Plug 'majutsushi/tagbar'

" fugitive.vim: a Git wrapper
Plug 'tpope/vim-fugitive'

" A vim plugin to display the indention levels with thin vertical lines
Plug 'Yggdroot/indentLine'

" UltiSnips - The ultimate snippet solution for Vim.
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'

" Dark powered asynchronous completion framework for neovim/Vim8
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

if has('win32') || has('win64')
  Plug 'tbodt/deoplete-tabnine', { 'do': 'powershell.exe .\install.ps1' }
else
  Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
endif

call plug#end()

" Settings for SimpyFold. Enable docstring preview in fold text.
let g:SimpylFold_docstring_preview=1

" Settings for Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_loc_list_height=4
let g:syntastic_always_populate_loc_list=1

let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

" Settings for Vim theme
set t_Co=256
colorscheme moody

" Settings for NERDTree
map <F2> :NERDTreeToggle<CR>
" Auto start NERDTree
autocmd VimEnter * NERDTree
" Auto focus to the main window.
autocmd VimEnter * wincmd w
" Enable line number
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" Enable showing the hidden file
let NERDTreeShowHidden=1
" Windows width
let NERDTreeWinSize=35
" Ignore the file with below extension
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" Enable the bookmark
let NERDTreeShowBookmarks=1

" Settings for NERDTree Git plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" Settings for NERDCommenter
let g:NERDSpaceDelims=1

" Settings for Tagbar
nmap <F3> :TagbarToggle<CR>
let g:tagbar_show_linenumbers=1

" Settings for IndentLine
let g:indentLine_color_term=237

" Settings for UltiSnips
" let g:UltiSnipsExpandTrigger="<C-j>"
" let g:UltiSnipsJumpForwardTrigger="<C-j>"
" let g:UltiSnipsJumpBackwardTrigger="<C-b>"

" Status line configuration from
" https://blog.longwin.com.tw/2009/10/vim-session-status-bar-2009/
set laststatus=2
set statusline=%4*%<\ %1*[%F]
set statusline+=%4*\ %5*[%{&encoding}, " encoding
set statusline+=%{&fileformat}%{\"\".((exists(\"+bomb\")\ &&\ &bomb)?\",BOM\":\"\").\"\"}]%m
set statusline+=%4*%=\ %6*%y%4*\ %3*%l%4*,\ %3*%c%4*\ \<\ %2*%P%4*\ \>
highlight User1 ctermfg=red
highlight User2 term=underline cterm=underline ctermfg=green
highlight User3 term=underline cterm=underline ctermfg=yellow
highlight User4 term=underline cterm=underline ctermfg=white
highlight User5 ctermfg=cyan
highlight User6 ctermfg=white

" Settings for deoplete.nvim
let g:deoplete#enable_at_startup = 1
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Settings for neosnippet.vim
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-j>     <Plug>(neosnippet_expand_or_jump)
smap <C-j>     <Plug>(neosnippet_expand_or_jump)
xmap <C-j>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
